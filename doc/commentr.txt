*commentr.txt*	For Vim version 7.3

                                      Type |gO| to see the table of contents.

==============================================================================
INTRO							*commentr-intro*

A powerful commenter plugin.

==============================================================================
COMMANDS						*commentr-commands*

:[range]Comment [flags]						*:Comment*
		Comment a range of text. Range is automagically calculated
		from current mode and [flags]. See |commentr-flags|.

			|mode()|
			n	The given [range].
			no	The motion.
				See: |commentr#CommentMotion()|.
			v, V, CTRL-V
			s, S, CTRL-S
				Range from '[ to '].
			i	A zero-length range at the position of
				the cursor

		Example: >
			map {binding} <Cmd>Comment C<CR>
			map {binding} <Cmd>Uncomment<CR>
<
:[range]Uncomment [flags]				*:Uncomment*
		Like |:Comment|, but uncomment a range of text.

:[range]ToggleComment [flags]				*:ToggleComment*
		If text under cursor is uncommented same as |:Comment|
		otherwise |:Uncomment|. Determining whether text is commented
		or not is based on syntax item under and around cursor.

List of funtions:					*commentr-functions*

commentr#CommentMotion({flags})			*commentr#CommentMotion()*
		|:Comment| text over motion. Calls it in
		|Operator-pending-mode|.

		Example: >
			nmap <expr> gc; commentr#CommentMotion('') . 't;'
<		comment out everything till the next ";". >
			map <expr> gcc
			  \ '_' . commentr#CommentMotion('') . '$'
<		comment out current line, starting from the first non-white
		character.

commentr#UncommentMotion({flags})		*commentr#UncommentMotion()*
		|:Uncomment| text over motion.

commentr#ToggleCommentMotion({flags})	*commentr#ToggleCommentMotion()*
		|:ToggleComment| over motion.

==============================================================================
CONFIGURATION					*commentr-configuration*

------------------------------------------------------------------------------
							*g:commentr_bindings*
Map keybindings to |commentr-flags|. The |Dictionary| shall contain items
in "binding": "flags" format. for what "flags" can

	{binding}	Any valid {lhs} for |:map|.
			Used like: >
				map <Plug>(CommentrComment){binding} ...
<
	{flags}		See |commentr-flags|

To disable builtin mappings just use "{}".

Examples: >
	{ 'c': '', 'cm': 'm', 'c<Space>': 'DDD' }
	{ 'c': '', 'ct': 'a' }
<
If you wish to add custom keybindings, see |commentr-commands| and
|commentr-functions| for examples.

List of plugin keys:					*commentr-keys*

<Plug>(CommentrComment)
		Used for keybindings that toggles comments.

<Plug>(CommentrUncomment)
		Used for keybindings that uncomment text.

							*commentr-gcc*
Example: >
	map g <Plug>(CommentrComment)
	map gu <Plug>(CommentrUncomment)
<	Change prefix of default mappings.

List of builtin mappings:			*commentr-builtin-mappings*

|Normal-mode| mappings:

<Plug>(CommentrComment){binding}{motion}
		Toggle comment on a range of text moved over by {motion}.

		Note: Every top-level comments will be removed even if its end
		extends beyond {motion}.

<Plug>(CommentrComment){binding}c
	Toggle comment on current line.

<Plug>(CommentrComment){binding}A
	Jump with |A| and insert comment, i.e. append comment.

<Plug>(CommentrComment){binding}I
	Jump with |I| and insert comment, i.e. prepend comment.

<Plug>(CommentrComment){binding}o
	Jump with |o| and insert comment, i.e. insert comment below.

<Plug>(CommentrComment){binding}O
	Jump with |O| and insert comment, i.e. insert comment above.

<Plug>(CommentrComment)C{motion}
	Comment out lines moved over by {motion}.
	Note: It is only defined for default comment group.

<Plug>(CommentrComment)x
	Toggle so called "sexy" comments.

<Plug>(CommentrUncomment){motion}
	Uncomment lines moved over {motion}

<Plug>(CommentrUncomment)u
	Uncomment current line.

|Visual-mode| mappings:

<Plug>(CommentrComment)<group>c
	Comment out regin.

<Plug>(CommentrUncomment)
	Uncomment region.

------------------------------------------------------------------------------
							*b:commentr_ft_noguess*
Prohibit filetype to be guessed.

Example: >
	au FileType cpp let b:commentr_ft_noguess = ['c']
<	Never assume that "c" is being edited inside "cpp".

==============================================================================
CONCEPTS						*commentr-concepts*

------------------------------------------------------------------------------
Comment flags						*commentr-flags*
							*b:commentr_flags*

Controls commenting and uncommenting options. It's one-line |String| that
can be compined from the followings:

  {group}
	Single-letter group identifier to be used for commenting and
	uncommenting.

	{a-z}	Group.
	{A-Z}	Force line-wise operation of mode.
	*	All group.

	Conventionally "d" is used for documentation comments and "m" for
	module comments.

	Default: "c".

  =	Force linewise mode.

  +{left-align}{left-margin}[{left-padding}
                             {right-padding}]{right-margin}{right-align}+
	Specifies alignment, margins and paddings for left and right ends of
	comments respectively.

	+	Allow middle parts of a multi-piece comment on the left and
		right sides. Default disabled. See 'comments' for left middle
		pieces. Note: Relative alignment not implemented.

	{left-margin}
	{right-margin}
	{left-padding}
	{right-padding}
		Positive |Number|s.

		Text: >
			Lorem     /*      ispum      */     dolor
<			Margin: >
			     [<->]                     [<->]
<			Padding: >
			            [<->]       [<->]
<
		Example: >
			3[4]5
<			Left margin: 3; left and right padding: 4;
			right margin: 5.

	{left-align}
		0	Place left part of comment to the first column.
>
			 1|>   struct foobar {
			 2|>    field1,
			 3|>      field1,
			 4|>   }
<
		_	Place left part of comment before the first non-white
			character.
>
			 1|   >struct foobar {
			 2|    >field1,
			 3|      >field1,
			 4|   >}
<
		|	Place left part of comment to one column and as right
			as possible.
>
			 1|   >struct foobar {
			 2|   > field1,
			 3|   >   field1,
			 4|   >}
<
		<Tab> charaters will be break into spaces if necessary.

	{right-align}
		$	Append right part of comment to the line.

			With trailing whites: >
			 1|   struct foobar {    <
			 2|    field1,  <
			 3|      field1, <
			 4|   }   <
<
		<	Same as $, but remove trailing whites.
>
			 1|   struct foobar {<
			 2|    field1,<
			 3|      field1,<
			 4|   }<
<
		|	Remove trailing whites and place right part of comment
			to one column and as left as possible. Note that lines
			may be longer than 'textwidth'.
>
			 1|   struct foobar {<
			 2|    field1,       <
			 3|      field1,     <
			 4|   }              <
<
		I, >	Remove trailing whites and stretch line to 'textwidth'
			character wide by inserting spaces. When no
			'textwidth' is specified, ">" is the same as "|", "I"
			is the same as "$".
>
			set &textwidth=15

			  |--------------|
			  |12345678901234567890
			 1|   struct foobar {<
			 2|    field1,   <
			 3|      field1, <
			 4|   }          <
<

Example: >
	au FileType * let b:commentr_flags = ['*|1[1]0$']
<
------------------------------------------------------------------------------
Comment string					*commentr-comment-string*

It is just like 'commentstring' with some added features. It is a
comma-separated list of commenting alternatives. Each alternative consits of:
	[{flags}...][{lalign}]{format}[{ralign}][,,{transform}...]

{flags}:
    \=x	Group to be use for the current and further
	comments. Internally, "\=d" used for documentation and
	"\=m" for module comments.

{lalign}:
  \0 \^ Comment must begin on the first column.

  \_	Comment must begin on the first non-whitespace column.

{format}:
	Format of comment. "%s" will be replaced with the
	comment text. If omitted, format will be treated like if "%s" would be
	appended to the end of {format}.  Example: >
		//%s
		//
<	means the same.

	Escape sequences:
	  \n	Line break.
		Note that one-one additional line break needed on both sides
		to separate custom text from real comment start and end
		markers.

	Example: >
		/*\nStart:\nSecond line\nThird line%sLast line\n*/
<		/*Start:
		Second line
		Third line
		...
		Last line*/

{ralign}:
  \$	Comment must end at the last column. If right part of comment string
	is empty, it specifies a line comment.

  \_	Comment must end at the last non-whitespace column,
	i.e. optional whitespace can follow it.  For formats without right
	sides (e.g "//%s"), it defaults to "\$", otherwise no requirements
	will be specified.

{transform}:
  x/{sub1}/{sub2}/
	Swaps {sub1} and {sub2}: Substitutes {sub1}
	with {sub2} when commenting, and {sub2} with {sub1} when uncommenting.
	{sub1} and {sub2} are "\" escaped and passed to the regex engine with
	'noignorecase' and "very nomagic" flags ("\C\V").

  s/{pat}/{sub}/
	Substitute {pat} with {sub} only when commenting.

  S/{pat}/{sub}/
	Substitute {pat} with {sub} only when uncommenting.

Optional whitespace can be inserted between {transform} sequences. Any other
character can be used as a separator instead of "/" in {transform}.

Examples: >
	\=d\_<<%s>>\_,,  x|>>|AA|
<	Specifies a documentation comment that must spawn through the whole
	line with optional whitespace surrounding it. When commenting, every
	occurence of ">>" will be replaced with "AA". On uncommenting it will
	be undoed.

	Note that for one-way transformation use "s" or "S". It can be
	used to build regexes to nest unnestable comments.

See "autoload/commentr.vim" for more examples.

==============================================================================
LICENSE							*commentr-license*

Released under the GNU General Public License version v3.0 or later.

 vim:tw=78:ts=8:noet:ft=help:norl:nowrap
